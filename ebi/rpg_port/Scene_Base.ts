//==============================================================================
// ■ Scene_Base
//------------------------------------------------------------------------------
// 　ゲーム中の全てのシーンのスーパークラスです。
//==============================================================================

class Scene_Base
  //--------------------------------------------------------------------------
  // ● メイン
  //--------------------------------------------------------------------------
  public main
    start
    post_start
    update until scene_changing?
    pre_terminate
    terminate
  }
  //--------------------------------------------------------------------------
  // ● 開始処理
  //--------------------------------------------------------------------------
  public start
    create_main_viewport
  }
  //--------------------------------------------------------------------------
  // ● 開始後処理
  //--------------------------------------------------------------------------
  public post_start
    perform_transition
    Input.update
  }
  //--------------------------------------------------------------------------
  // ● シーン変更中判定
  //--------------------------------------------------------------------------
  public scene_changing?
    SceneManager.scene != self
  }
  //--------------------------------------------------------------------------
  // ● フレーム更新
  //--------------------------------------------------------------------------
  public update
    update_basic
  }
  //--------------------------------------------------------------------------
  // ● フレーム更新（基本）
  //--------------------------------------------------------------------------
  public update_basic
    Graphics.update
    Input.update
    update_all_windows
  }
  //--------------------------------------------------------------------------
  // ● 終了前処理
  //--------------------------------------------------------------------------
  public pre_terminate
  }
  //--------------------------------------------------------------------------
  // ● 終了処理
  //--------------------------------------------------------------------------
  public terminate
    Graphics.freeze
    dispose_all_windows
    dispose_main_viewport
  }
  //--------------------------------------------------------------------------
  // ● トランジション実行
  //--------------------------------------------------------------------------
  public perform_transition
    Graphics.transition(transition_speed)
  }
  //--------------------------------------------------------------------------
  // ● トランジション速度の取得
  //--------------------------------------------------------------------------
  public transition_speed
    return 10
  }
  //--------------------------------------------------------------------------
  // ● ビューポートの作成
  //--------------------------------------------------------------------------
  public create_main_viewport
    @viewport = Viewport.new
    @viewport.z = 200
  }
  //--------------------------------------------------------------------------
  // ● ビューポートの解放
  //--------------------------------------------------------------------------
  public dispose_main_viewport
    @viewport.dispose
  }
  //--------------------------------------------------------------------------
  // ● 全ウィンドウの更新
  //--------------------------------------------------------------------------
  public update_all_windows
    instance_variables.each do |varname|
      ivar = instance_variable_get(varname)
      ivar.update if ivar.is_a?(Window)
    }
  }
  //--------------------------------------------------------------------------
  // ● 全ウィンドウの解放
  //--------------------------------------------------------------------------
  public dispose_all_windows
    instance_variables.each do |varname|
      ivar = instance_variable_get(varname)
      ivar.dispose if ivar.is_a?(Window)
    }
  }
  //--------------------------------------------------------------------------
  // ● 呼び出し元のシーンへ戻る
  //--------------------------------------------------------------------------
  public return_scene
    SceneManager.return
  }
  //--------------------------------------------------------------------------
  // ● 各種サウンドとグラフィックの一括フェードアウト
  //--------------------------------------------------------------------------
  public fadeout_all(time = 1000)
    RPG::BGM.fade(time)
    RPG::BGS.fade(time)
    RPG::ME.fade(time)
    Graphics.fadeout(time * Graphics.frame_rate / 1000)
    RPG::BGM.stop
    RPG::BGS.stop
    RPG::ME.stop
  }
  //--------------------------------------------------------------------------
  // ● ゲームオーバー判定
  //    パーティが全滅状態ならゲームオーバー画面へ遷移する。
  //--------------------------------------------------------------------------
  public check_gameover
    SceneManager.goto(Scene_Gameover) if $game_party.all_dead?
  }
}
