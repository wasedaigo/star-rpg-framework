//==============================================================================
// ■ Cache
//------------------------------------------------------------------------------
// 　各種グラフィックを読み込み、Texture オブジェクトを作成、保持するモジュール
// です。読み込みの高速化とメモリ節約のため、作成した Texture オブジェクトを内部
// のハッシュに保存し、同じビットマップが再度要求されたときに既存のオブジェクト
// を返すようになっています。
//==============================================================================

class Cache {
  private static cache;
  //--------------------------------------------------------------------------
  // ● アニメーション グラフィックの取得
  //--------------------------------------------------------------------------
  public static getAnimation(filename: string, hue): void {
    loadTexture("Graphics/Animations/", filename, hue)
  }
  //--------------------------------------------------------------------------
  // ● 戦闘背景（床）グラフィックの取得
  //--------------------------------------------------------------------------
  public static battleback1(filename) {
    loadTexture("Graphics/Battlebacks1/", filename)
  }
  //--------------------------------------------------------------------------
  // ● 戦闘背景（壁）グラフィックの取得
  //--------------------------------------------------------------------------
  public static battleback2(filename) {
    loadTexture("Graphics/Battlebacks2/", filename)
  }
  //--------------------------------------------------------------------------
  // ● 戦闘グラフィックの取得
  //--------------------------------------------------------------------------
  public static battler(filename, hue) {
    loadTexture("Graphics/Battlers/", filename, hue)
  }
  //--------------------------------------------------------------------------
  // ● 歩行グラフィックの取得
  //--------------------------------------------------------------------------
  public static character(filename) {
    loadTexture("Graphics/Characters/", filename)
  }
  //--------------------------------------------------------------------------
  // ● 顔グラフィックの取得
  //--------------------------------------------------------------------------
  public static face(filename) {
    loadTexture("Graphics/Faces/", filename)
  }
  //--------------------------------------------------------------------------
  // ● 遠景グラフィックの取得
  //--------------------------------------------------------------------------
  public static parallax(filename) {
    loadTexture("Graphics/Parallaxes/", filename)
  }
  //--------------------------------------------------------------------------
  // ● ピクチャ グラフィックの取得
  //--------------------------------------------------------------------------
  public static picture(filename) {
    loadTexture("Graphics/Pictures/", filename)
  }
  //--------------------------------------------------------------------------
  // ● システム グラフィックの取得
  //--------------------------------------------------------------------------
  public static system(filename) {
    loadTexture("Graphics/System/", filename)
  }
  //--------------------------------------------------------------------------
  // ● タイルセット グラフィックの取得
  //--------------------------------------------------------------------------
  public static tileset(filename)
    loadTexture("Graphics/Tilesets/", filename)
  }
  //--------------------------------------------------------------------------
  // ● タイトル（背景）グラフィックの取得
  //--------------------------------------------------------------------------
  public static title1(filename) {
    loadTexture("Graphics/Titles1/", filename)
  }
  //--------------------------------------------------------------------------
  // ● タイトル（枠）グラフィックの取得
  //--------------------------------------------------------------------------
  public static title2(filename) {
    loadTexture("Graphics/Titles2/", filename)
  }
  //--------------------------------------------------------------------------
  // ● ビットマップの読み込み
  //--------------------------------------------------------------------------
  public static loadTexture(folder_name, filename, hue = 0) {
    cache ||= {}
    if (!filename) {
      return emptyTexture();
    } else {
      if (hue == 0) {
        normalTexture(folder_name + filename)
      } else {
        hueChangedTexture(folder_name + filename, hue)
      }
    }
  }
  //--------------------------------------------------------------------------
  // ● 空のビットマップを作成
  //--------------------------------------------------------------------------
  public static emptyTexture() {
    Texture.new(32, 32)
  }
  //--------------------------------------------------------------------------
  // ● 通常のビットマップを作成／取得
  //--------------------------------------------------------------------------
  public static normalTexture(path: string) {
    cache[path] = Texture.new(path) unless include(path)
    cache[path]
  }
  //--------------------------------------------------------------------------
  // ● 色相変化済みビットマップを作成／取得
  //--------------------------------------------------------------------------
  public static hueChangedTexture(path: string, hue) {
    key = [path, hue]
    unless include(key)
      cache[key] = normalTexture(path).clone
      cache[key].hue_change(hue)
    }
    return cache[key];
  }
  //--------------------------------------------------------------------------
  // ● キャッシュ存在チェック
  //--------------------------------------------------------------------------
  public static include(key) {
    cache[key] && !cache[key].disposed?
  }
  //--------------------------------------------------------------------------
  // ● キャッシュのクリア
  //--------------------------------------------------------------------------
  public static clear() {
    cache ||= {}
    cache.clear
    // TODO: Do we need to start garbage collection here?
    // GC.start
  }
}
